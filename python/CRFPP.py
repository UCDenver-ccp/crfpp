# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _CRFPP
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    def getTemplate(*args): return _CRFPP.Model_getTemplate(*args)
    def createTagger(*args): return _CRFPP.Model_createTagger(*args)
    def what(*args): return _CRFPP.Model_what(*args)
    __swig_destroy__ = _CRFPP.delete_Model
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _CRFPP.new_Model(*args)
        try: self.this.append(this)
        except: self.this = this
Model_swigregister = _CRFPP.Model_swigregister
Model_swigregister(Model)

class Tagger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tagger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tagger, name)
    __repr__ = _swig_repr
    def set_model(*args): return _CRFPP.Tagger_set_model(*args)
    def set_vlevel(*args): return _CRFPP.Tagger_set_vlevel(*args)
    def vlevel(*args): return _CRFPP.Tagger_vlevel(*args)
    def set_cost_factor(*args): return _CRFPP.Tagger_set_cost_factor(*args)
    def cost_factor(*args): return _CRFPP.Tagger_cost_factor(*args)
    def set_nbest(*args): return _CRFPP.Tagger_set_nbest(*args)
    def nbest(*args): return _CRFPP.Tagger_nbest(*args)
    def add(*args): return _CRFPP.Tagger_add(*args)
    def size(*args): return _CRFPP.Tagger_size(*args)
    def xsize(*args): return _CRFPP.Tagger_xsize(*args)
    def dsize(*args): return _CRFPP.Tagger_dsize(*args)
    def result(*args): return _CRFPP.Tagger_result(*args)
    def answer(*args): return _CRFPP.Tagger_answer(*args)
    def y(*args): return _CRFPP.Tagger_y(*args)
    def y2(*args): return _CRFPP.Tagger_y2(*args)
    def yname(*args): return _CRFPP.Tagger_yname(*args)
    def x(*args): return _CRFPP.Tagger_x(*args)
    def ysize(*args): return _CRFPP.Tagger_ysize(*args)
    def prob(*args): return _CRFPP.Tagger_prob(*args)
    def set_penalty(*args): return _CRFPP.Tagger_set_penalty(*args)
    def penalty(*args): return _CRFPP.Tagger_penalty(*args)
    def alpha(*args): return _CRFPP.Tagger_alpha(*args)
    def beta(*args): return _CRFPP.Tagger_beta(*args)
    def emission_cost(*args): return _CRFPP.Tagger_emission_cost(*args)
    def next_transition_cost(*args): return _CRFPP.Tagger_next_transition_cost(*args)
    def prev_transition_cost(*args): return _CRFPP.Tagger_prev_transition_cost(*args)
    def best_cost(*args): return _CRFPP.Tagger_best_cost(*args)
    def Z(*args): return _CRFPP.Tagger_Z(*args)
    def empty(*args): return _CRFPP.Tagger_empty(*args)
    def clear(*args): return _CRFPP.Tagger_clear(*args)
    def next(*args): return _CRFPP.Tagger_next(*args)
    def parse(*args): return _CRFPP.Tagger_parse(*args)
    def what(*args): return _CRFPP.Tagger_what(*args)
    __swig_destroy__ = _CRFPP.delete_Tagger
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _CRFPP.new_Tagger(*args)
        try: self.this.append(this)
        except: self.this = this
Tagger_swigregister = _CRFPP.Tagger_swigregister
Tagger_swigregister(Tagger)

VERSION = _CRFPP.VERSION


